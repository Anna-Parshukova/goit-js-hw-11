{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '44821264-a08a7741629af83990ada8b48';\nconst BASE_URL = 'https://pixabay.com/api/';\n\nexport const fetchImages = async (query) => {\n  try {\n    const response = await axios.get(BASE_URL, {\n      params: {\n        key: API_KEY,\n        q: query,\n        image_type: 'photo',\n        orientation: 'horizontal',\n        safesearch: true,\n      },\n    });\n    return response.data.hits;\n  } catch (error) {\n    throw new Error('Failed to fetch images');\n  }\n};\n","import SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nexport const renderImages = (images) => {\n  const gallery = document.getElementById('gallery');\n  gallery.innerHTML = '';\n\n  if (images.length === 0) {\n    iziToast.error({ title: 'Error', message: 'Sorry, there are no images matching your search query. Please try again!' });\n    return;\n  }\n\n  const imageCards = images.map(image => {\n    return `\n      <a href=\"${image.largeImageURL}\">\n        <img src=\"${image.webformatURL}\" alt=\"${image.tags}\">\n        <div>Likes: ${image.likes}</div>\n        <div>Views: ${image.views}</div>\n        <div>Comments: ${image.comments}</div>\n        <div>Downloads: ${image.downloads}</div>\n      </a>\n    `;\n  }).join('');\n  \n  gallery.innerHTML = imageCards;\n\n  new SimpleLightbox('.gallery a').refresh();\n};\n\nexport const showLoading = () => {\n  const loading = document.querySelector('.loading');\n  loading.style.display = 'block';\n};\n\nexport const hideLoading = () => {\n  const loading = document.querySelector('.loading');\n  loading.style.display = 'none';\n};\n","import { fetchImages } from './js/pixabay-api';\nimport { renderImages, showLoading, hideLoading } from './js/render-functions';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst form = document.getElementById('search-form');\n\nform.addEventListener('submit', async (event) => {\n  event.preventDefault();\n  const query = document.getElementById('search-input').value.trim();\n\n  if (!query) {\n    iziToast.warning({ title: 'Warning', message: 'Search query cannot be empty!' });\n    return;\n  }\n\n  showLoading();\n\n  try {\n    const images = await fetchImages(query);\n    renderImages(images);\n  } catch (error) {\n    iziToast.error({ title: 'Error', message: error.message });\n  } finally {\n    hideLoading();\n  }\n});\n"],"names":["API_KEY","BASE_URL","fetchImages","query","axios","renderImages","images","gallery","imageCards","image","SimpleLightbox","showLoading","loading","hideLoading","form","event","iziToast","error"],"mappings":"owBAEA,MAAMA,EAAU,qCACVC,EAAW,2BAEJC,EAAc,MAAOC,GAAU,CAC1C,GAAI,CAUF,OATiB,MAAMC,EAAM,IAAIH,EAAU,CACzC,OAAQ,CACN,IAAKD,EACL,EAAGG,EACH,WAAY,QACZ,YAAa,aACb,WAAY,EACb,CACP,CAAK,GACe,KAAK,IACtB,MAAe,CACd,MAAM,IAAI,MAAM,wBAAwB,CACzC,CACH,ECjBaE,EAAgBC,GAAW,CACtC,MAAMC,EAAU,SAAS,eAAe,SAAS,EAGjD,GAFAA,EAAQ,UAAY,GAEhBD,EAAO,SAAW,EAAG,CACvB,SAAS,MAAM,CAAE,MAAO,QAAS,QAAS,0EAA0E,CAAE,EACtH,MACD,CAED,MAAME,EAAaF,EAAO,IAAIG,GACrB;AAAA,iBACMA,EAAM,aAAa;AAAA,oBAChBA,EAAM,YAAY,UAAUA,EAAM,IAAI;AAAA,sBACpCA,EAAM,KAAK;AAAA,sBACXA,EAAM,KAAK;AAAA,yBACRA,EAAM,QAAQ;AAAA,0BACbA,EAAM,SAAS;AAAA;AAAA,KAGtC,EAAE,KAAK,EAAE,EAEVF,EAAQ,UAAYC,EAEpB,IAAIE,EAAe,YAAY,EAAE,SACnC,EAEaC,EAAc,IAAM,CAC/B,MAAMC,EAAU,SAAS,cAAc,UAAU,EACjDA,EAAQ,MAAM,QAAU,OAC1B,EAEaC,EAAc,IAAM,CAC/B,MAAMD,EAAU,SAAS,cAAc,UAAU,EACjDA,EAAQ,MAAM,QAAU,MAC1B,EChCME,EAAO,SAAS,eAAe,aAAa,EAElDA,EAAK,iBAAiB,SAAU,MAAOC,GAAU,CAC/CA,EAAM,eAAc,EACpB,MAAMZ,EAAQ,SAAS,eAAe,cAAc,EAAE,MAAM,OAE5D,GAAI,CAACA,EAAO,CACVa,EAAS,QAAQ,CAAE,MAAO,UAAW,QAAS,+BAA+B,CAAE,EAC/E,MACD,CAEDL,IAEA,GAAI,CACF,MAAML,EAAS,MAAMJ,EAAYC,CAAK,EACtCE,EAAaC,CAAM,CACpB,OAAQW,EAAO,CACdD,EAAS,MAAM,CAAE,MAAO,QAAS,QAASC,EAAM,OAAO,CAAE,CAC7D,QAAY,CACRJ,GACD,CACH,CAAC"}